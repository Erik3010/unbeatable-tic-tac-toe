(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const s of document.querySelectorAll('link[rel="modulepreload"]'))n(s);new MutationObserver(s=>{for(const o of s)if(o.type==="childList")for(const i of o.addedNodes)i.tagName==="LINK"&&i.rel==="modulepreload"&&n(i)}).observe(document,{childList:!0,subtree:!0});function e(s){const o={};return s.integrity&&(o.integrity=s.integrity),s.referrerPolicy&&(o.referrerPolicy=s.referrerPolicy),s.crossOrigin==="use-credentials"?o.credentials="include":s.crossOrigin==="anonymous"?o.credentials="omit":o.credentials="same-origin",o}function n(s){if(s.ep)return;s.ep=!0;const o=e(s);fetch(s.href,o)}})();const A=a=>new DOMParser().parseFromString(a,"image/svg+xml"),m=(a,{namespaced:t=!1,props:e={}}={})=>{const n="http://www.w3.org/2000/svg",s=t?document.createElementNS(n,a):document.createElement(a);for(const o in e)o==="class"?s.classList.add(...e[o]):s.setAttribute(o,e[o]);return s},g=1,d=2,T=["o.svg","x.svg"],L=[[0,1],[0,-1],[1,0],[-1,0],[1,1],[1,-1],[-1,1],[-1,-1]];class S{constructor(t){this.counter=0,this.game=t,this.INITIAL_DEPTH=0}calculate(t,e,n=this.INITIAL_DEPTH){this.counter++;const s=this.game.getAvailableMoves(t),o=this.game.isWin(t);if(o){const[r]=o;if(r===g)return{score:n-10};if(r===d)return{score:10-n}}if(!s.length)return{score:0};let i=e===d?-1/0:1/0,l;for(const{y:r,x:c}of s){t[r][c]=e;const h=this.nextTurn(e),{score:u}=this.calculate(t,h,n+1);(e===d&&u>i||e===g&&u<i)&&(i=u,l={y:r,x:c}),t[r][c]=null}return{move:l,score:i}}nextTurn(t){return t%2+1}}class B{constructor(){this.row=3,this.col=3,this.turn=g,this.board=[],this.boardEl=document.querySelector(".board"),this.assets={},this.minimax=new S(this)}async init(){await this.loadAssets(),this.initBoard()}async loadAssets(){const[t,e]=await Promise.all(T.map(this.loadAsset.bind(this)));this.assets.o=t,this.assets.x=e}async loadAsset(t){const e=await(await fetch(`./${t}`)).text();return A(e).querySelector("svg")}initBoard(){for(let t=0;t<this.row;t++){this.board[t]=[];for(let e=0;e<this.col;e++){this.board[t][e]=null;const n=this.createCell({y:t,x:e});this.boardEl.appendChild(n)}}}createCell({y:t,x:e}){const n=m("div",{props:{class:["cell"]}}),s=this.handleCellClick.bind(this,n,{y:t,x:e});return n.addEventListener("click",s),n}animateCell(t){const e=t.querySelectorAll("svg > *");for(const n of e){const s=n.getTotalLength();n.setAttribute("stroke-dasharray",s),n.setAttribute("stroke-dashoffset",s),n.classList.add("animate")}}handleCellClick(t,{y:e,x:n}){this.board[e][n]!==null||this.turn===d||(this.putCellInBoard({y:e,x:n},t),setTimeout(this.botMove.bind(this),250))}botMove(){const{move:t}=this.minimax.calculate(this.board,d);t&&this.putCellInBoard(t)}putCellInBoard({y:t,x:e},n=null){this.board[t][e]=this.turn;const s=this.turn===g?"o":"x",o=this.assets[s].cloneNode(!0),i=n??this.getCellByCoordinate({y:t,x:e});i.appendChild(o),this.animateCell(i),this.checkWin(),this.nextTurn()}isWin(t=this.board){for(const[e,n]of t.entries())for(const[s,o]of n.entries()){const i=this.checkAroundCell({y:e,x:s},t);if(!(o===null||!i))return[o,{y:e,x:s},i]}return!1}checkWin(){const t=this.isWin();if(!t)return;const[e,{y:n,x:s},{y:o,x:i}]=t,l=this.getCellByCoordinate({y:n,x:s}),r=this.getCellByCoordinate({y:n+o*(this.row-1),x:s+i*(this.col-1)});this.animatePath({position:{y:n,x:s},el:l},{position:{y:n+o*2,x:s+i*2},el:r})}animatePath(t,e){const n=this.boardEl.getBoundingClientRect(),s=t.el.getBoundingClientRect(),o=e.el.getBoundingClientRect(),i=m("svg",{namespaced:!0,props:{width:n.width,height:n.height,class:["path-svg"]}}),l=s.width/2,r=s.height/2,c=10,h=Math.sign(t.position.x-e.position.x),u=h*l+h*-1*c,b=t.position.y===e.position.y?0:-r+c,p={x:s.x-n.x+(l+u),y:s.y-n.y+(r+b)},y=Math.sign(e.position.x-t.position.x),v=y*l+y*-1*c,w=t.position.y===e.position.y?0:r-c,C={x:o.x-n.x+(o.width/2+v),y:o.y-n.y+(o.height/2+w)},f=m("path",{namespaced:!0,props:{d:`M${p.x} ${p.y} L${C.x} ${C.y}`,class:["path","animate"]}}),x=f.getTotalLength();f.setAttribute("stroke-dashoffset",x),f.setAttribute("stroke-dasharray",x),i.appendChild(f),this.boardEl.appendChild(i)}checkAroundCell({y:t,x:e},n=this.board){for(const[s,o]of L){let i=0;const l=n[t][e];for(let r=1;r<=2;r++){const c=t+Math.sign(o)*r,h=e+Math.sign(s)*r;this.inBoard({y:c,x:h})&&n[c][h]===l&&i++}if(i>=2)return{x:s,y:o}}return!1}getCellByCoordinate({y:t,x:e}){const n=t*this.row+e+1;return document.querySelector(`.cell:nth-child(${n})`)}getAvailableMoves(t=this.board){const e=[];for(const[n,s]of t.entries())for(const[o,i]of s.entries())i===null&&e.push({y:n,x:o});return e}get hasEmptyCell(){return this.board.some(t=>t.some(e=>e===null))}nextTurn(){this.turn=this.enemy}get enemy(){return this.turn%2+1}inBoard({y:t,x:e}){return t>=0&&e>=0&&t<this.row&&e<this.col}}const E=new B;E.init();
